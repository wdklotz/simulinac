# def test0():
#     """ testing the * operator for NODE objects"""
#     print('--------------------------------Test0---')
#     def Matrix(v):
#         matrix = NP.eye(MDIM,MDIM)
#         matrix[0,0] = v[0]
#         matrix[0,1] = v[1]
#         matrix[1,0] = v[2]
#         matrix[1,1] = v[3]
#         matrix[2,2] = v[4]
#         matrix[2,3] = v[5]
#         matrix[3,2] = v[6]
#         matrix[3,3] = v[7]
#         matrix[4,4] = v[8]
#         matrix[4,5] = v[9]
#         matrix[5,4] = v[10]
#         matrix[5,5] = v[11]
#         return matrix
#     ax = Matrix((1,2,3,4,1,2,4,5,1,2,5,6))
#     bx = Matrix((1,0,0,1,1,0,0,1,1,0,0,1))
#     bx = 2*bx
#     cx = Matrix((1,1,0,1,1,1,0,1,1,1,0,1))
#     A = Node()
#     A.matrix = ax
#     A.label = 'Node-A'
#     A.length = 1.
#     print(A.toString())

#     B = Node()
#     B.matrix = bx
#     B.label = 'Node-B'
#     B.length = 1.
#     print(B.toString())
#     AB = A*B
#     print(AB.toString())
#     BA = B*A
#     print(BA.toString())

#     testeq = NP.array_equal(AB.matrix,BA.matrix)
#     print(F'AB.matrix equal BA.matrix? {testeq}')

#     C = Node()
#     C.matrix = cx
#     C.label = 'Node-C'
#     C.length = 1.
#     print(C.toString())
#     AC = A*C
#     print(AC.toString())
#     CA = C*A
#     print(CA.toString())

#     testeq = NP.array_equal(AC.matrix,CA.matrix)
#     print(F'AC.matrix equal CA.matrix? {testeq}')
# def test1():
#     print('--------------------------------Test1---')
#     print('trivial test 1 ...')
#     i1 = I("I0")
#     i2 = i1*i1
#     print(i1.toString())
#     print(i2.toString())
# def test2():
#     print('--------------------------------Test2---')
#     print('trivial test 2 ...')
#     i1 = I("I-Node")
#     d1 = D('D1',length=10.)
#     print(d1.toString())
#     print((d1*i1*d1).toString())
#     d2 = D('D2',length=90)
#     print(d2.toString())
#     print((d1*d2).toString())
# def test3():
#     print('--------------------------------Test3---')
#     p = PARAMS['sollteilchen']
#     gradient = 3.
#     beta     = p.beta
#     kin_energy   = p.tkin
#     K2 = K(gradient, p)
#     print('gradient[T/m] {:.3f}; beta(v/c) {:.3f}; kin_energy[Mev] {:.3f}'.format(gradient, beta, kin_energy))
#     qf = QF("QF",K2, length = 1.1)
#     print("QF-->", qf.toString())
#     qd = QD("QD",K2, length = 1.2)
#     print("QD-->", qd.toString())
#     # product QF*QD
#     print("QF*QD-->", (qf*qd).toString())
# def test4():
#     print('--------------------------------Test4---')
#     def doit(elm, anz):
#         elm_slices = elm.make_slices(anz = anz)
#         print(''.join('{}\n'.format(el) for el in elm_slices))
#         elmx = elm_slices[0]
#         for slice in elm_slices[1:]:
#             elmx = elmx*slice
#         print(elmx.toString())
#         print(elm.toString())

#     print('test slicing of elements ...')
#     gradient = 1.
#     beta     = 0.5
#     energy   = 0.2
#     k = k0test(gradient = gradient, energy = energy, beta = beta)
#     # elements
#     x = pi
#     d      = D(length = x)
#     qf     = QF(k0 = k, length = x)
#     qd     = QD(k0 = k, length = x)
#     sd     = SD(radius = 10., length = x)
#     rd     = RD(radius = 10., length = x)
#     gp     = GAP()
#     rg     = RFG()
#     qfth   = QFth(k,x)
#     qdth   = QDth(k,x)
#     qfthx  = QFthx(k,x)
#     qdthx  = QDthx(k,x)
#     rfc    = RFC(length = x)
#     sixd   = SIXD(length = x)
#     # slicing
#     anz = 5
#     doit(d, anz)
#     doit(sixd, anz)
#     doit(qf, anz)
#     doit(qd, anz)
#     doit(sd, anz)
#     doit(rd, anz)
#     doit(gp, anz)
#     doit(rg, anz)
#     doit(qfth, anz)
#     doit(qdth, anz)
#     doit(qfthx, anz)
#     doit(qdthx, anz)
#     doit(rfc, anz)
# # # # # # def test6():
# # # # # #     print('--------------------------------Test6---')
# # # # # #     print('test step_through elements ...')
# # # # # #     kqf =   wille()['k_quad_f']
# # # # # #     lqf =   wille()['length_quad_f']
# # # # # #     kqd =   wille()['k_quad_d']
# # # # # #     lqd =   wille()['length_quad_d']
# # # # # #     rhob =  wille()['bending_radius']
# # # # # #     lb =    wille()['dipole_length']
# # # # # #     ld =    wille()['drift_length']

# # # # # #     # elements
# # # # # #     mqf = QF(k0=kqf, length=lqf, label='QF')
# # # # # #     mqd = QD(k0=kqd, length=lqd, label='QD')
# # # # # #     mb = RD(radius=rhob, length=lb, label='B')
# # # # # #     md = D(length=ld)
# # # # # #     rfc = RFC(length = 4*0.024)

# # # # # #     steps = 13

# # # # # #     # test step_through elements ...
# # # # # #     list = [mqf, mqd, mb, md]
# # # # # #     list = [mqf, rfc]
# # # # # #     for m_anfang in list:
# # # # # #         m_end = I()
# # # # # #         slices = m_anfang.make_slices(anz = steps)
# # # # # #         print('======================================')
# # # # # #         for count, mi in enumerate(slices):
# # # # # #             print('step ', count+1, end = '  ')
# # # # # #             print(mi.toString())
# # # # # #             m_end = m_end*mi
# # # # # #         print(m_end, '\n'+m_end.toString())
# # # # # #         print(m_anfang, '\n'+m_anfang.toString())
# # # # # def test7():
# # # # #     print('--------------------------------Test7---')
# # # # #     print('test Rechteckmagnet ...')
# # # # #     rhob = wille()['bending_radius']
# # # # #     lb  = wille()['dipole_length']
# # # # #     mb  = SD(radius = rhob, length = lb, label = 'SD')
# # # # #     mr  = RD(radius = rhob, length = lb, label = 'RD')
# # # # #     print(mb.toString())
# # # # #     print(mr.toString())
# # # # def test8():
# # # #     from lattice import Lattice
# # # #     from tracker import track_soll
# # # #     print('--------------------------------Test8---')
# # # #     print('soll-particle\n'+PARAMS['sollteilchen'].toString())
# # # #     print('test rf-gap ...')

# # # #     gap = GAP()
# # # #     lg = Lattice()
# # # #     lg.add_element(gap)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(rfg, 'GAP', filter = 'matrix')
# # # #     objprnt(gap, 'GAP')
# # # #     print(solltrack)
# # # #     print('GAP.particle(i)\n'+gap.particle.toString())
# # # #     print('GAP.particle(f)\n'+gap.particlef.toString())

# # # #     rfg = RFG()
# # # #     lg = Lattice()
# # # #     lg.add_element(rfg)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(rfg, 'RFG', filter = 'matrix')
# # # #     objprnt(rfg, 'RFG')
# # # #     print(solltrack)
# # # #     print('RFG.particle(i)\n'+rfg.particle.toString())
# # # #     print('RFG.particle(f)\n'+rfg.particlef.toString())

# # # #     rfg = RFG(mapping = 'simple')
# # # #     lg = Lattice()
# # # #     lg.add_element(rfg)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(rfg, 'RFG', filter = 'matrix')
# # # #     objprnt(rfg, 'RFG')
# # # #     print(solltrack)
# # # #     print('RFG.particle(i)\n'+rfg.particle.toString())
# # # #     print('RFG.particle(f)\n'+rfg.particlef.toString())

# # # #     rfg =  RFG(mapping = 'base')
# # # #     lg = Lattice()
# # # #     lg.add_element(rfg)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(rfg, 'RFG', filter = 'matrix')
# # # #     objprnt(rfg, 'RFG')
# # # #     print(solltrack)
# # # #     print('RFG.particle(i)\n'+rfg.particle.toString())
# # # #     print('RFG.particle(f)\n'+rfg.particlef.toString())

# # # #     input_file = 'SF/SF_WDK2g44.TBL'
# # # #     EzPeak     = 1.4
# # # #     SF_tab    = SFdata(input_file, EzPeak = EzPeak)
# # # #     rfg = RFG(mapping = 'ttf', gap = 0.048, SFdata = SF_tab)
# # # #     lg = Lattice()
# # # #     lg.add_element(rfg)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(rfg, 'RFG', filter = 'matrix')
# # # #     objprnt(rfg, 'RFG')
# # # #     print(solltrack)
# # # #     print('RFG.particle(i)\n'+rfg.particle.toString())
# # # #     print('RFG.particle(f)\n'+rfg.particlef.toString())

# # # #     input_file = 'SF/SF_WDK2g44.TBL'
# # # #     EzPeak     = 1.4
# # # #     SF_tab    = SFdata(input_file, EzPeak = EzPeak)
# # # #     rfg = RFG(mapping = 'dyn', gap = 0.048, SFdata = SF_tab)
# # # #     lg = Lattice()
# # # #     lg.add_element(rfg)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(rfg, 'RFG', filter = 'matrix')
# # # #     objprnt(rfg, 'RFG')
# # # #     print(solltrack)
# # # #     print('RFG.particle(i)\n'+rfg.particle.toString())
# # # #     print('RFG.particle(f)\n'+rfg.particlef.toString())

# # # #     print('test cavity ...')
# # # #     cav = RFC()
# # # #     lg = Lattice()
# # # #     lg.add_element(cav)
# # # #     solltrack = track_soll(lg).as_table()
# # # #     # objprnt(cav, 'RFC', filter = 'matrix')
# # # #     objprnt(cav, 'RFC')
# # # #     print(solltrack)
# # # #     print('CAV.particle(i)\n'+cav.particle.toString())
# # # #     print('CAV.particle(f)\n'+cav.particlef.toString())
# # # def test9():
# # #     print('--------------------------------Test9---')
# # #     print('test: quad k-faktor and quad scaling ...')
# # #     grad = 45.                              # [T/m] gradient
# # #     tk  = 50.                               # [MeV]  kin. energy
# # #     kq = k0prot(gradient = grad, tkin = tk) # quad strength [1/m**2]
# # #     len = 0.4                               # quad len [m]
# # #     focal = kq*len
# # #     focal = 1./focal  # focal len [m]

# # #     print('soll-particle\n'+PARAMS['sollteilchen'].toString())
# # #     print('kq [1/m**2]\t{:3f}'.format(kq))
# # #     print('dB/dz[T/m]\t{:.3f}'.format(grad))
# # #     print('len[m]\t\t{:.3f}'.format(len))
# # #     print('focal len[m]\t{:.3f}'.format(focal))

# # #     grad = dBdxprot(kq, tk) # quad gradient from k and tkinetic
# # #     print('dB/dz[T/m]\t{:.3f} from dBxprot()'.format(grad))

# # #     mqf = QF(k0 = kq, length = len)
# # #     mqd = QD(k0 = kq, length = len)
# # #     cavity = RFC(
# # #         EzAvg = 1.,
# # #         PhiSoll = radians(-30.),
# # #         fRF = 800.e6)
# # #     print('======================== adjust_energy QF')
# # #     tki = 50.              # [MeV]  kin. energy
# # #     PARAMS['sollteilchen'] = Proton(tki)
# # #     for dt in [0., 950.]:
# # #         tkf = tki+dt
# # #         k_scaled = scalek0prot(kq, tki, tkf)
# # #         print('(tki, kq) ({},{:.3f}) --> (tkf, k_scaled) ({},{:.3f})'.format(tki, kq, tkf, k_scaled))
# # #         print(mqf.adjust_energy(tkf).toString())
# # #         print(mqf.particle.toString())
# # #     print('======================== adjust_energy QD')
# # #     tki = 50. #  PARAMS['injection_energy']    # [MeV]  kin. energy
# # #     PARAMS['sollteilchen'] = Proton(tki)
# # #     for dt in [0., 950.]:
# # #         tkf = tki+dt
# # #         k_scaled = scalek0prot(kq, tki, tkf)
# # #         print('(tki, kq) ({},{:.3f}) --> (tkf, k_scaled) ({},{:.3f})'.format(tki, kq, tkf, k_scaled))
# # #         print(mqd.adjust_energy(tkf).toString())
# # #         print(mqd.particle.toString())
# # #     print('======================== adjust_energy CAV')
# # #     tki = 50.    #  PARAMS['injection_energy']    # [MeV]  kin. energy
# # #     PARAMS['sollteilchen'] = Proton(tki)
# # #     for dt in [0., 950.]:
# # #         tkf = tki+dt
# # #         k_scaled = scalek0prot(kq, tki, tkf)
# # #         print('(tki, kq) ({},{:.3f}) --> (tkf, k_scaled) ({},{:.3f})'.format(tki, kq, tkf, k_scaled))
# # #         print(cavity.adjust_energy(tkf).toString())
# # #         print(cavity.particle.toString())
# # def test10():
# #     print('--------------------------------Test10---')
# #     print('Particle class test ...')
# #     dictprnt(PARAMS, text = 'setutil.PARAMS')
# #     # particle class
# #     print()
# #     print(Proton(0.).toString())
# #     print(Proton(50.).toString())
# #     print(Proton(200.).toString())
# #     print(Proton(1.e3).toString())
# #     print()
# #     print(Electron(0.).toString())
# #     print(Electron(50.).toString())
# #     print(Electron(200.).toString())
# #     print(Electron(1.e3).toString())
# def test11():
#     print('--------------------------------Test11---')
#     print('thin lense tests ...')
#     k0     =  1.
#     length =  2.
#     qf     =  QFth(k0,0.0)
#     qd     =  QDth(k0,0.0)
#     rf     =  RFC(length = length)
#     print(qf.toString())
#     print('soll-particle@QFT\n'+qf.particle.toString())
#     print(qd.toString())
#     print('soll-particle@QDT\n'+qf.particle.toString())
#     print(rf.toString())
#     print('soll-particle@RFC\n'+qf.particle.toString())
#     print('---------------- step through ---------------')
#     for elm in qf.make_slices(anz = 8):
#         print(elm.toString())
#     print('---------------- step through ---------------')
#     for elm in qd.make_slices(anz = 7):
#         print(elm.toString())
#     print('------ RF cavity test & step through --------')
# # #     # for elm in rf.make_slices():
# # #     #     print(elm.toString())
# # # def test12():
# # #     print('--------------------------------Test12---')
# # #     print('test12 adjust_energy change ...')
# # #     d = D(length = 99.);              print('id >>', d);     print(d.toString())
# # #     d.adjust_energy(tkin = 1000.);    print('id >>', d);     print(d.toString())
# # #     qf = QF(k0 = 1.5, length = 0.3);  print('id >>', qf);    print(qf.toString())
# # #     qf.adjust_energy(tkin = 200.);    print('id >>', qf);    print(qf.toString())
# # #     qd = QD(k0 = 1.5, length = 0.3);  print('id >>', qd);    print(qd.toString())
# # #     qd.adjust_energy(tkin = 200.);    print('id >>', qd);    print(qd.toString())
# # #     rfc = RFC(length = 1.23);         print('id >>', rfc);   print(rfc.toString())
# # #     rfc.adjust_energy(tkin = 200.);   print('id >>', rfc);   print(rfc.toString())
# # def test13():
# #     print('--------------------------------Test13---')
# #     print('test SIXD node tracking ...')
# #     particle = Proton(tkin = 100.)
# #     l   =  0.05    #[m]
# #     sixd = SIXD(length = l, particle = particle)
# #     xi  = yi = 1.e-2
# #     xpi = ypi = 1.e-2
# #     z   = 1.e-3
# #     dp2p = 1.e-2
# #     i_track = NP.array([xi, xpi, yi, ypi, z, dp2p, 0., 1., 0., 1.])
# #     f_track = sixd.map(i_track)
# #     print(i_track)
# #     print(f_track)
# def test14():
#     print('--------------------------------Test14---')
#     print('test MRO for QF, QD ...')
#     print('type(QF.__mro__) =  ', type(QF.__mro__))
#     print(''.join('{}\n'.format(el) for el in QF.__mro__))
#     print('type(QD.__mro__) =  ', type(QD.__mro__))
#     print(''.join('{}\n'.format(el) for el in QD.__mro__))

#     qf0 = QF(k0 = 1.0, length = 1.98, label = 'qf0')
#     qf1 = QF(k0 = 1.0, length = 1.88, label = 'qf1')
#     qf1['viseo'] = 0.6
#     qd0=QD(k0 = 1.0, length = 1.78, label = 'qd0')
#     qd0['viseo'] = -0.7
#     print('qf0.label = ', qf0.label)
#     print('qf0["viseo"]= ', qf0['viseo'])
#     print('qf1.label = ', qf1.label)
#     print('qf1["viseo"]= ', qf1['viseo'])
#     print('qd0.label = ', qd0.label)
#     print('qd0["viseo"]= ', qd0['viseo'])
#     print('\n', qf0.__dict__)
#     print('\n', qd0.__dict__)
    # test0()
    # test1()
    # test2()
    # test3()
    # test4()
    # test6()
    # test7()
    # test8()
    # test9()
    # test10()
    # test11()
    # test12()
    # test13()
    # test14()
